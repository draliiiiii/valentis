# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from __future__ import unicode_literals

from django.db import models


class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class ClinicDiagnosis(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    code = models.CharField(max_length=30)
    name = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'clinic_diagnosis'


class ClinicPatientvisit(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=255, blank=True, null=True)
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    patient_no = models.CharField(max_length=30, blank=True, null=True)
    visit_id = models.CharField(max_length=30, blank=True, null=True)
    radiology_no = models.CharField(max_length=30, blank=True, null=True)
    notes = models.TextField(blank=True, null=True)
    diagnosis = models.TextField(blank=True, null=True)
    prescription_id = models.CharField(max_length=30, blank=True, null=True)
    status = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'clinic_patientvisit'


class DjangoAdminLog(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('Users', models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class LabsLabresults(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    patient_no = models.TextField()
    tests_done = models.TextField(blank=True, null=True)
    test_results = models.TextField()
    uploaded_file = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'labs_labresults'


class LabsLabs(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    lab_name = models.TextField(blank=True, null=True)
    h01 = models.BooleanField()
    h02 = models.BooleanField()
    h03 = models.BooleanField()
    h04 = models.BooleanField()
    h05 = models.BooleanField()
    h06 = models.BooleanField()
    h07 = models.BooleanField()
    h08 = models.BooleanField()
    h09 = models.BooleanField()
    c01 = models.BooleanField()
    c02 = models.BooleanField()
    p01 = models.BooleanField()
    p02 = models.BooleanField()
    p03 = models.BooleanField()
    p04 = models.BooleanField()
    p05 = models.BooleanField()
    p06 = models.BooleanField()
    mbs01 = models.BooleanField()
    mbs02 = models.BooleanField()
    mbs03 = models.BooleanField()
    ge01 = models.BooleanField()
    lks01 = models.BooleanField()
    lks02 = models.BooleanField()
    lks03 = models.BooleanField()
    lks04 = models.BooleanField()
    lks05 = models.BooleanField()
    lks06 = models.BooleanField()
    lks07 = models.BooleanField()
    gm01 = models.BooleanField()
    gm02 = models.BooleanField()
    gm03 = models.BooleanField()
    lm01 = models.BooleanField()
    lm02 = models.BooleanField()
    lm03 = models.BooleanField()
    lm04 = models.BooleanField()
    lpg01 = models.BooleanField()
    lpg02 = models.BooleanField()
    lpg03 = models.BooleanField()
    lpg04 = models.BooleanField()
    lpg05 = models.BooleanField()
    lpg06 = models.BooleanField()
    lpg07 = models.BooleanField()
    lpg08 = models.BooleanField()
    hv01 = models.BooleanField()
    hv02 = models.BooleanField()
    hv03 = models.BooleanField()
    i01 = models.BooleanField()
    i02 = models.BooleanField()
    i03 = models.BooleanField()
    m01 = models.BooleanField()
    m02 = models.BooleanField()
    m03 = models.BooleanField()
    m04 = models.BooleanField(db_column='M04')  # Field name made lowercase.
    m05 = models.BooleanField()
    m06 = models.BooleanField()
    m07 = models.BooleanField()
    m08 = models.BooleanField()
    g01 = models.BooleanField()
    other = models.TextField(blank=True, null=True)
    diagnosis = models.TextField(blank=True, null=True)
    h01_alergy = models.BooleanField()
    h02_alergy = models.BooleanField()
    h03_alergy = models.BooleanField()
    h04_alergy = models.BooleanField()
    h06_alergy = models.BooleanField()
    h07_alergy = models.BooleanField()
    h08_alergy = models.BooleanField()
    c01_iron_studies = models.BooleanField()
    c01_cardiac_markers = models.BooleanField()
    c02_cardiac_markers = models.BooleanField()
    c02_cardiac_markers_1 = models.BooleanField()
    lks01_antenatal_screen = models.BooleanField()
    lks02_antenatal_screen = models.BooleanField()
    lks04_antenatal_screen = models.BooleanField()
    lks05_antenatal_screen = models.BooleanField()
    lks06_antenatal_screen = models.BooleanField()
    lks07_antenatal_screen = models.BooleanField()
    gm01_antenatal_screen = models.BooleanField()
    fsh_menopausal_screen = models.BooleanField()
    oestradiol_menopausal_screen = models.BooleanField()
    albumin_menopausal_screen = models.BooleanField()
    hv02_menopausal_screen = models.BooleanField()
    hv03_menopausal_screen = models.BooleanField()
    ast_menopausal_screen = models.BooleanField()
    i01_menopausal_screen = models.BooleanField()
    i02_menopausal_screen = models.BooleanField()
    i03_menopausal_screen = models.TextField(blank=True, null=True)
    patient_no = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'labs_labs'


class LabsRadiology(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    lpm_date = models.BooleanField()
    could_b_pregrant = models.TextField(blank=True, null=True)
    examination = models.TextField(blank=True, null=True)
    clinical_indication = models.TextField(blank=True, null=True)
    intra_orbital_fb_hist = models.BooleanField()
    intracranial_clip = models.BooleanField()
    pacemaker = models.BooleanField()
    cochlear_implants = models.BooleanField()
    prosthetic_hrt_valve = models.BooleanField()
    pregnancy = models.BooleanField()
    recent_surgery = models.BooleanField()
    patient_info = models.BooleanField()
    diabetic_metformin = models.BooleanField()
    allergic_contrast = models.BooleanField()
    other_allergies = models.BooleanField()
    kidney_problems = models.BooleanField()
    anticoagulant_drugs = models.BooleanField()
    egfr_result = models.CharField(max_length=30, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    patient_no = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'labs_radiology'


class LabsRadiologylist(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    modality = models.CharField(max_length=255)
    group = models.CharField(max_length=255)
    tests = models.CharField(max_length=300)

    class Meta:
        managed = False
        db_table = 'labs_radiologylist'


class LabsRadiologyresult(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    patient_no = models.CharField(max_length=30)
    results = models.TextField()
    tests_done = models.TextField(blank=True, null=True)
    uploaded_file = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'labs_radiologyresult'


class MedicationModels(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    prescription_id = models.CharField(max_length=30, blank=True, null=True)
    patient_no = models.CharField(max_length=30)
    patient_name = models.TextField()
    address = models.TextField()
    phone_number = models.IntegerField()
    prescription = models.TextField()
    signature = models.BinaryField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'medication_models'


class MedicationMydawa(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    brand = models.CharField(max_length=255)
    size = models.CharField(max_length=300)
    price = models.CharField(max_length=300)

    class Meta:
        managed = False
        db_table = 'medication_mydawa'


class MedicationSanlamdatabase(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    code = models.CharField(max_length=255)
    admit_days = models.CharField(max_length=255)
    anniv = models.CharField(max_length=255)
    auth_batch_no = models.CharField(max_length=255)
    authority_type = models.CharField(max_length=255)
    available_limit = models.CharField(max_length=255)
    co_signee = models.CharField(max_length=255)
    date_admitted = models.CharField(max_length=255)
    date_authorized = models.CharField(max_length=255)
    date_reported = models.CharField(max_length=255)
    day_bed_charge = models.CharField(max_length=255)
    family_no = models.CharField(max_length=255)
    internal_notes = models.CharField(max_length=255)
    member_no = models.CharField(max_length=255)
    notes = models.CharField(max_length=255)
    pre_diagonisis = models.CharField(max_length=255)
    provider = models.CharField(max_length=255)
    reported_by = models.CharField(max_length=255)
    reserve = models.CharField(max_length=255)
    ward = models.CharField(max_length=255)
    authorized_by = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'medication_sanlamdatabase'


class NurseModels(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    slug = models.CharField(max_length=50, blank=True, null=True)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    systolic = models.IntegerField()
    diastolic = models.IntegerField()
    temperature = models.FloatField()
    oxygen_saturation = models.FloatField()
    urinalysis = models.TextField(blank=True, null=True)
    heart_rate = models.CharField(max_length=100)
    others = models.TextField(blank=True, null=True)
    attending_nurse = models.CharField(max_length=30, blank=True, null=True)
    patient_no = models.CharField(max_length=30)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=30)
    middle_name = models.CharField(max_length=30, blank=True, null=True)
    height = models.CharField(max_length=100)
    random_glucose = models.TextField(blank=True, null=True)
    weight = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'nurse_models'


class PaymentsCash(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=255)
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    items = models.TextField()
    amount_payed = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    total_cost = models.FloatField()
    balance = models.TextField()

    class Meta:
        managed = False
        db_table = 'payments_cash'


class PaymentsMemberAcceptance(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=255)
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    member_no = models.CharField(max_length=20)
    status = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    status_date = models.DateField()
    user_id = models.CharField(max_length=10)
    date_entered = models.DateField()

    class Meta:
        managed = False
        db_table = 'payments_member_acceptance'


class PaymentsMemberAnniversary(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=255)
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    member_no = models.CharField(max_length=20)
    start_date = models.DateField()
    end_date = models.DateField()
    anniv = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'payments_member_anniversary'


class PaymentsMemberBenefits(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=255)
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    member_no = models.CharField(max_length=20)
    limit = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    sharing = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    anniv = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    suspended = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    suspended_date = models.DateField(blank=True, null=True)
    expense = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    idx = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    balance = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float

    class Meta:
        managed = False
        db_table = 'payments_member_benefits'


class PaymentsMemberInfo(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    slug = models.CharField(max_length=50)
    family_no = models.CharField(max_length=20)
    member_no = models.CharField(max_length=20)
    surname = models.CharField(max_length=40)
    first_name = models.CharField(max_length=40)
    other_name = models.CharField(max_length=40)
    user_id = models.CharField(max_length=10)
    date_entered = models.CharField(max_length=100)
    cancelled = models.CharField(max_length=10)
    employment_no = models.CharField(max_length=20)
    gender = models.CharField(max_length=20)
    passport_no = models.CharField(max_length=15)
    dob = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'payments_member_info'


class PaymentsMemberinfosanlamdatabase(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    family_no = models.CharField(db_column='FAMILY_NO', max_length=255)  # Field name made lowercase.
    member_no = models.CharField(db_column='MEMBER_NO', max_length=255)  # Field name made lowercase.
    first_name = models.CharField(db_column='FIRST_NAME', max_length=255)  # Field name made lowercase.
    surname = models.CharField(db_column='SURNAME', max_length=255)  # Field name made lowercase.
    other_names = models.CharField(db_column='OTHER_NAMES', max_length=255)  # Field name made lowercase.
    dob = models.CharField(db_column='DOB', max_length=255)  # Field name made lowercase.
    user_id = models.CharField(db_column='USER_ID', max_length=255)  # Field name made lowercase.
    cancelled = models.CharField(db_column='CANCELLED', max_length=255)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'payments_memberinfosanlamdatabase'


class PaymentsPreAuthorization(models.Model):
    name = models.CharField(max_length=255)
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    member_no = models.CharField(max_length=15)
    provider = models.IntegerField()
    date_reported = models.DateField()
    reported_by = models.CharField(max_length=20)
    authorized_by = models.CharField(max_length=10)
    date_authorized = models.DateField()
    pre_diagnosis = models.CharField(max_length=60)
    authority_type = models.IntegerField()
    ward = models.IntegerField()
    available_limit = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    admit_days = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    reserve = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    notes = models.CharField(max_length=200)
    internal_notes = models.CharField(max_length=100)
    anniv = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    day_bed_charge = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    date_admitted = models.DateField(blank=True, null=True)
    code = models.IntegerField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'payments_pre_authorization'


class PaymentsPrincipalApplicant(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=255)
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    family_no = models.CharField(max_length=20)
    first_name = models.CharField(max_length=40)
    postal_add = models.CharField(max_length=15)
    town = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    email = models.CharField(max_length=254)
    other_names = models.CharField(max_length=40)
    corp_id = models.CharField(max_length=10)
    mobile_no = models.CharField(max_length=20)
    family_size = models.DecimalField(max_digits=10, decimal_places=5)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    user_id = models.CharField(max_length=10)
    category = models.CharField(max_length=10)

    class Meta:
        managed = False
        db_table = 'payments_principal_applicant'


class PaymentsProvider(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(max_length=255)
    slug = models.CharField(max_length=50)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    code = models.CharField(max_length=10)
    provider = models.CharField(max_length=60)

    class Meta:
        managed = False
        db_table = 'payments_provider'


class RegistrationAllergies(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    allergy_name = models.CharField(max_length=200)

    class Meta:
        managed = False
        db_table = 'registration_allergies'


class RegistrationChildren(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    age = models.CharField(max_length=30, blank=True, null=True)
    patient_no = models.ForeignKey('Users', models.DO_NOTHING)
    name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'registration_children'


class RegistrationCounty(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    county = models.CharField(db_column='County', max_length=300)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'registration_county'


class RegistrationInsurancecompanies(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    name = models.CharField(db_column='Name', max_length=300)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'registration_insurancecompanies'


class RegistrationMedication(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    age = models.CharField(max_length=30, blank=True, null=True)
    patient_no = models.ForeignKey('Users', models.DO_NOTHING)
    name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'registration_medication'


class RegistrationMedicationhistory(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    disease = models.CharField(db_column='Disease', max_length=300)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'registration_medicationhistory'


class RegistrationModels(models.Model):
    patient_no = models.IntegerField(primary_key=True)
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    first_name = models.CharField(max_length=30)
    middle_name = models.CharField(max_length=30, blank=True, null=True)
    last_name = models.CharField(max_length=30)
    gender = models.CharField(max_length=30)
    street_name = models.CharField(max_length=30, blank=True, null=True)
    apartment_name = models.CharField(max_length=30, blank=True, null=True)
    postal_code = models.CharField(max_length=30, blank=True, null=True)
    postal_address = models.TextField(blank=True, null=True)
    city = models.CharField(max_length=30, blank=True, null=True)
    country = models.CharField(max_length=30, blank=True, null=True)
    age = models.IntegerField(blank=True, null=True)
    next_of_kin = models.TextField(blank=True, null=True)
    n_of_kin_rel = models.TextField(blank=True, null=True)
    email = models.CharField(max_length=254, blank=True, null=True)
    phone = models.CharField(max_length=30, blank=True, null=True)
    primary_insurance = models.TextField(blank=True, null=True)
    secondary_insurance = models.TextField(blank=True, null=True)
    pri_ins_sub = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    sec_ins_sub = models.DecimalField(max_digits=10, decimal_places=5, blank=True, null=True)  # max_digits and decimal_places have been guessed, as this database handles decimal fields as float
    other_ins_subscriber = models.TextField(blank=True, null=True)
    subscriber_relationship = models.TextField(blank=True, null=True)
    sub_address = models.TextField(blank=True, null=True)
    ss_number = models.TextField(blank=True, null=True)
    sub_ss_number = models.TextField(blank=True, null=True)
    alt_phone = models.IntegerField(blank=True, null=True)
    sub_work_phone = models.TextField(blank=True, null=True)
    dob = models.DateField(blank=True, null=True)
    sub_dob = models.DateField(blank=True, null=True)
    sub_employer = models.TextField(blank=True, null=True)
    status = models.IntegerField(blank=True, null=True)
    occupation = models.CharField(max_length=30, blank=True, null=True)
    marital_status = models.CharField(max_length=30, blank=True, null=True)
    spouse = models.CharField(max_length=30, blank=True, null=True)
    no_children = models.IntegerField(blank=True, null=True)
    childrens = models.CharField(max_length=100, blank=True, null=True)
    prev_docs = models.CharField(max_length=200, blank=True, null=True)
    medical_information = models.TextField(blank=True, null=True)
    alergies = models.TextField(blank=True, null=True)
    preferred_pharmacy = models.TextField(blank=True, null=True)
    last_phys_examination = models.DateField(blank=True, null=True)
    last_blood_work = models.DateField(blank=True, null=True)
    last_colonoscopy = models.DateField(blank=True, null=True)
    last_tetanus_shot = models.DateField(blank=True, null=True)
    last_menstrual = models.DateField(blank=True, null=True)
    last_pap_smear = models.DateField(blank=True, null=True)
    last_mammogram = models.DateField(blank=True, null=True)
    dexa = models.TextField(blank=True, null=True)
    no_pregnancies = models.IntegerField(blank=True, null=True)
    miscourages = models.TextField(blank=True, null=True)
    living_children = models.CharField(max_length=30, blank=True, null=True)
    methods_of_contraception = models.TextField(blank=True, null=True)
    surgeries = models.TextField(blank=True, null=True)
    genetic_diseases = models.TextField(blank=True, null=True)
    if_smoker = models.CharField(max_length=30, blank=True, null=True)
    cigar_per_day = models.CharField(max_length=30, blank=True, null=True)
    no_of_yr_smoking = models.CharField(max_length=30, blank=True, null=True)
    if_chew_tobacco = models.CharField(max_length=30, blank=True, null=True)
    yrs_chewing_tobacco = models.CharField(max_length=30, blank=True, null=True)
    if_quit_before = models.CharField(max_length=30, blank=True, null=True)
    tobacco_quit_duration = models.CharField(max_length=30, blank=True, null=True)
    if_drink_alcohol = models.CharField(max_length=30, blank=True, null=True)
    alocohol_type = models.CharField(max_length=30, blank=True, null=True)
    alcohol_frequency = models.CharField(max_length=30, blank=True, null=True)
    if_drug_used = models.CharField(max_length=30, blank=True, null=True)
    drug_type = models.TextField(blank=True, null=True)
    when_drug_used = models.CharField(max_length=30, blank=True, null=True)
    if_exercise = models.CharField(max_length=30, blank=True, null=True)
    exercise_freq = models.CharField(max_length=30, blank=True, null=True)
    if_special_diet = models.CharField(max_length=30, blank=True, null=True)
    special_diet = models.TextField(blank=True, null=True)
    if_use_caffein = models.CharField(max_length=30, blank=True, null=True)
    caffein_daily_amt = models.CharField(max_length=30, blank=True, null=True)
    is_sadder = models.CharField(max_length=30, blank=True, null=True)
    if_lost_interest = models.CharField(max_length=30, blank=True, null=True)
    have_will = models.CharField(max_length=30, blank=True, null=True)
    uploaded_file = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'registration_models'


class RegistrationUploads(models.Model):
    patient_no = models.IntegerField(primary_key=True)
    file = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'registration_uploads'


class SharedappUploadmodel(models.Model):
    file = models.CharField(max_length=255)
    file_name = models.CharField(max_length=300)
    description = models.CharField(max_length=300)
    upload_id = models.CharField(primary_key=True, max_length=32)
    category_type = models.CharField(max_length=300)
    checksum = models.CharField(max_length=300)
    created_by = models.CharField(max_length=300)
    created_on = models.DateTimeField()
    updated_on = models.DateTimeField()
    patient_id = models.ForeignKey(RegistrationModels, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'sharedapp_uploadmodel'


class Users(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    email = models.CharField(unique=True, max_length=254)
    first_name = models.CharField(max_length=30, blank=True, null=True)
    last_name = models.CharField(max_length=30, blank=True, null=True)
    phone_number = models.CharField(max_length=30, blank=True, null=True)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    id_number = models.CharField(unique=True, max_length=20, blank=True, null=True)
    staff_number = models.CharField(unique=True, max_length=30, blank=True, null=True)
    activation_key = models.CharField(max_length=40, blank=True, null=True)
    activation_key_expires = models.DateTimeField(blank=True, null=True)
    verification_code = models.IntegerField(blank=True, null=True)
    verification_code_expires = models.DateTimeField(blank=True, null=True)
    account_verified_date = models.DateTimeField(blank=True, null=True)
    date_joined = models.DateTimeField()
    last_seen = models.DateTimeField(blank=True, null=True)
    force_logout_date = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users'


class UsersGroups(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    customuser = models.ForeignKey(Users, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'users_groups'
        unique_together = (('customuser', 'group'),)


class UsersUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)  # AutoField?
    customuser = models.ForeignKey(Users, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'users_user_permissions'
        unique_together = (('customuser', 'permission'),)
